<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/04/07/hello-world/"/>
      <url>/2025/04/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GIT使用</title>
      <link href="/2025/04/07/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2025/04/07/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第三篇文章："><a href="#这是我的第三篇文章：" class="headerlink" title="这是我的第三篇文章："></a>这是我的第三篇文章：</h2>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql</title>
      <link href="/2025/04/07/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2025/04/07/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第二篇文章："><a href="#这是我的第二篇文章：" class="headerlink" title="这是我的第二篇文章："></a>这是我的第二篇文章：</h2>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python笔记</title>
      <link href="/2025/04/07/Python%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/04/07/Python%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Python基础语法"><a href="#Python基础语法" class="headerlink" title="Python基础语法"></a>Python基础语法</h1><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><ol><li>定义：<ul><li>被写下来的固定的值，称为字面量 </li></ul></li><li>常用值类型：<ul><li>数字：整数、浮点数、复数、布尔</li><li>字符串：描述文本的数据类型</li><li>列表：有序可变序列</li><li>元组：有序不可变序列</li><li>集合：无序不可变序列</li><li>字典：无序 Key-Value集合</li></ul></li></ol><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol><li>语法：<ul><li>单行注释 # (#号与注释内容一般间隔一个空格)</li><li>多行注释 “”” “”” (三个引号之间为注释内容，中间可以换行)</li></ul></li></ol><h2 id="输入和输出语句"><a href="#输入和输出语句" class="headerlink" title="输入和输出语句"></a>输入和输出语句</h2><ol><li>Print语句：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(内容<span class="number">1</span>,内容<span class="number">2</span>,内容<span class="number">3</span>,....,内容N)  (英文分号间隔，主要格式) </span><br><span class="line"><span class="built_in">print</span>( <span class="string">f&quot;变量的值为： <span class="subst">&#123;变量&#125;</span>&quot;</span> )</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>,end = <span class="string">&#x27;&#x27;</span>) <span class="comment"># 这样不会自动换行</span></span><br></pre></td></tr></table></figure><blockquote><p>补充：\t 不是字符串，不用加” “，相当于Tab键，\n则是回车键</p></blockquote></li><li>Input语句： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a =<span class="built_in">input</span>(<span class="string">&quot;内容&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注：input( )函数接收的类型为字符串，有时可能需要强转类型</p></blockquote></li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li>数据类型查看：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  type函数：type(数据) </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&#x27;呦，你好少年！&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ol><ol><li>数据类型转换：</li></ol><ul><li>目标类型(当前变量)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 事例：</span></span><br><span class="line">x = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">int_x  = <span class="built_in">int</span>(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：类型强转可能会报错，浮点数转整形可能会丢失精度</p></blockquote></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ol><li>算术运算符：<ul><li>加：+  </li><li>减：-</li><li>乘：*</li><li>除：/</li><li>整除：//  </li><li>取余：%</li><li>指数：**</li><li>加法赋值：+=</li><li>减法赋值：-=</li><li>乘法赋值：*=</li><li>除法赋值：/=</li><li>取模赋值：%=</li><li>幂赋值：**=</li><li>取整除赋值：//=</li></ul></li><li>比较运算符：<ul><li>大于：&gt;</li><li>小于：&lt;</li><li>等于：==</li><li>不等于：!=</li><li>大于等于：&gt;=</li><li>小于等于：&lt;=<blockquote><p>比较结果：True 或者 False(布尔类型)</p></blockquote></li></ul></li><li>逻辑运算符：<ul><li>逻辑与：and</li><li>逻辑或：or</li><li>逻辑非：not<blockquote><p>补充：转义字符：\，在需要转义的字符前面加上\</p></blockquote></li></ul></li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ol><li>定义：<ul><li>单引号：name = ‘K’</li><li>双引号：name = “K”</li><li>三引号：name = “””K”””</li></ul></li><li>拼接：<ul><li>字符串之间可以通过 “+”来拼接</li><li>字符串也可格式化拼接<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;K&#x27;</span></span><br><span class="line">age = <span class="number">66</span></span><br><span class="line">gpi = <span class="number">5.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我的名字是：&#x27;</span>+<span class="string">&#x27;K&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字是：%s&quot;</span> % name)</span><br><span class="line">message = <span class="string">&quot;我的名字是：%s，我的年龄是：%d，我的成绩是：%f&quot;</span> % (name,age,gpi)  </span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"><span class="comment"># 字符串快速格式化，适用于无需精度控制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我的名字是：<span class="subst">&#123;name&#125;</span>，我耳朵年龄是：<span class="subst">&#123;age&#125;</span>，我的成绩是：<span class="subst">&#123;gpi&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li>精度控制：<ul><li>“m.n”控制数据宽度和精度，m控制宽度(小于本身时不生效)，n控制精度(四舍五入)。<blockquote><p>%5.2f：宽度为5，小数点精度为：2<br>%5的：只设置宽度为5</p></blockquote></li></ul></li></ol><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><ul><li>语法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">条件成立时，所要执行的内容</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">条件成立时，所要执行的内容</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">3</span>:</span><br><span class="line">条件成立时，所要执行的内容</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">所有条件都不成立时，所要执行的内容</span><br><span class="line"><span class="comment"># 尤其注意if嵌套语句中代码块的缩进问题，缩进少的代码包含缩进多的代码块</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h2><ul><li>Random函数：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">num = random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><ol><li><p>while语句</p><ul><li>语法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">条件满足，执行循环内容</span><br><span class="line">条件满足，执行循环内容</span><br><span class="line">条件满足，执行循环内容</span><br><span class="line">··········</span><br><span class="line"><span class="comment"># 直至不满足条件，退出循环</span></span><br><span class="line"><span class="comment"># 注意while嵌套的代码块缩进问题和规划好循环终止</span></span><br><span class="line"><span class="comment">#循环条件属于自定义，可控适用于任何场景</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>for语句</p><ul><li>语法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集:</span><br><span class="line">条件满足，执行循环内容</span><br><span class="line">··········</span><br><span class="line"><span class="comment"># 依次输出字符串中的字符</span></span><br><span class="line">name = <span class="string">&#x27;jwi&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> name:</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># range用法： </span></span><br><span class="line"><span class="comment"># 依次输出0-10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">11</span>):</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment">#不定义初始位置就从0开始</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># 间隔为2的输出0-10(0,2,4,6,8,10)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">11</span>,<span class="number">2</span>):</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># 直至不满足条件，退出循环</span></span><br><span class="line"><span class="comment"># 注意for嵌套的代码块缩进问题</span></span><br><span class="line"><span class="comment">#for类似轮询，无法定义循环条件，只是被动的取数据处理，适用于数据容器</span></span><br></pre></td></tr></table></figure></li></ul></li><li>循环控制<ul><li>continue：中断本次循环，直接进入下次循环</li><li>break：终止循环，直接退出<blockquote><p>for 和while语句都适用，注意控制所属的循环层</p></blockquote></li></ul></li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ol><li>语法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,····,参数N</span>):</span><br><span class="line">函数体</span><br><span class="line"><span class="keyword">return</span> 返回值</span><br><span class="line"><span class="comment">#函数调用</span></span><br><span class="line">函数名(参数)</span><br><span class="line">a = 函数名(参数)</span><br><span class="line"><span class="comment"># 参数和返回值不需要则可以省略，注意形参与实参顺序一一对应,return语句后内容不在执行</span></span><br><span class="line"><span class="comment"># 函数可以互相嵌套</span></span><br><span class="line">**********************************************************</span><br><span class="line"><span class="comment"># 匿名函数:无名函数，只可使用一次，只能写一行，简介方便</span></span><br><span class="line"><span class="keyword">lambda</span> 传入参数: 函数体(一行代码)</span><br><span class="line"><span class="comment"># ----示例----</span></span><br><span class="line"><span class="keyword">lambda</span> x，y : x + y</span><br></pre></td></tr></table></figure></li><li>函数说明文档：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">func函数的作用是····</span></span><br><span class="line"><span class="string">:param x: 形参x表示·····</span></span><br><span class="line"><span class="string">:param y: 形参y表示·····</span></span><br><span class="line"><span class="string">:return : 返回值表示····</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li>变量<ul><li>作用域：变量作用范围，全局和局部</li><li>全局变量：函数内外都可用的变量，也可用关键字global在函数内部定义全局变量</li><li>局部变量：函数内部的临时变量，用完就被销毁</li></ul></li><li>返回值：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line"><span class="keyword">return</span> 结果<span class="number">1</span>,结果<span class="number">2</span></span><br><span class="line">x,y = func()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># 支持不同返回类型</span></span><br></pre></td></tr></table></figure></li><li>参数：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位置参数,根据参数位置传递参数,顺序严格执行</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name,age,gender</span>):</span><br><span class="line"><span class="built_in">print</span>(name,age,gender)</span><br><span class="line">func(a,b,c)</span><br><span class="line"><span class="comment"># 关键字参数,以键值对形式传参，无所谓顺序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name,age,gender</span>):</span><br><span class="line"><span class="built_in">print</span>(name,age,gender)</span><br><span class="line">func(name = a,age = b,gender = c)</span><br><span class="line"><span class="comment"># 缺省参数,优先采用传参但若传递时缺少某个参数，则采用默认参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name,age,gender = <span class="string">&#x27;K&#x27;</span></span>): <span class="comment"># 默认参数必须放在最后</span></span><br><span class="line"><span class="built_in">print</span>(name,age,gender)</span><br><span class="line">func(a,b)</span><br><span class="line"><span class="comment"># 位置不定长参数,调用函数时传递参数数量不定</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*kwargs</span>): <span class="comment"># kwargs是字典类型，将传参合并为一个字典</span></span><br><span class="line"><span class="built_in">print</span>(args)</span><br><span class="line">func(name = a,age = b,gender = c)</span><br><span class="line">func(score = s) <span class="comment"># 传参必须以字典形式</span></span><br><span class="line"><span class="comment"># 关键字不定长参数,调用函数时传递参数数量不定</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args</span>): <span class="comment"># args是元组类型，将传参合并为一个元组</span></span><br><span class="line"><span class="built_in">print</span>(args)</span><br><span class="line">func(a,b,c)</span><br><span class="line">func(s)</span><br></pre></td></tr></table></figure></li></ol><ul><li>函数作为参数：函数本身作为参数传入另一个函数</li><li>此时传入的是计算逻辑，而并非数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">compute</span>):</span><br><span class="line">result = compute(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">x,y</span>):</span><br><span class="line"><span class="keyword">return</span> x+y </span><br></pre></td></tr></table></figure></li></ul><h2 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ol><li>定义：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义空列表</span></span><br><span class="line">变量名称 = []</span><br><span class="line">变量名称 = <span class="built_in">list</span>()</span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">变量名称 = [元素<span class="number">1</span>,元素<span class="number">2</span>,····,元素n] </span><br><span class="line"><span class="comment"># 其中元素的种类可以是多种,没有限制，列表也可以嵌套列表</span></span><br></pre></td></tr></table></figure></li><li>特点：<ul><li>容纳多种不同种类元素</li><li>有序存储，拥有下标</li><li>可以修改</li><li>允许元素重复</li></ul></li><li>访问：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表可以通过下标，访问列表内容</span></span><br><span class="line">name_list = [<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;q&#x27;</span>]</span><br><span class="line">ni =name_list[<span class="number">0</span>]</span><br><span class="line">num_list = [<span class="number">1</span>,[<span class="number">5</span>,<span class="number">0</span>],<span class="number">8</span>]</span><br><span class="line">s =num_list[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(ni,s)</span><br><span class="line"><span class="comment"># 输出：k 5(也可以反向取，[-3]和[-2][-2]，但不可超出范围)</span></span><br><span class="line"><span class="comment"># 从前开始，0递增0、1、····，从后开始，-1递减-1、-2、···</span></span><br></pre></td></tr></table></figure></li><li>使用：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个列表</span></span><br><span class="line"><span class="built_in">list</span> = [元素<span class="number">1</span>,元素<span class="number">3</span>,元素<span class="number">2</span>，元素<span class="number">3</span>,元素<span class="number">3</span>]</span><br><span class="line"><span class="comment"># 查询元素1对应的下标</span></span><br><span class="line"><span class="built_in">list</span>.index(元素<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 修改下标为1所对应的值</span></span><br><span class="line"><span class="built_in">list</span>[<span class="number">1</span>] = 新元素</span><br><span class="line"><span class="comment"># 在下标为2的地方插入元素</span></span><br><span class="line"><span class="built_in">list</span>.insert(<span class="number">2</span>，新元素)</span><br><span class="line"><span class="comment"># 追加新元素至列表末尾</span></span><br><span class="line"><span class="built_in">list</span>.append(追加元素)</span><br><span class="line"><span class="comment"># 末尾追加一批元素</span></span><br><span class="line"><span class="built_in">list</span>.extend(一批元素)</span><br><span class="line"><span class="comment"># 删除下标为2的元素</span></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">list</span>[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 取出下标为2的元素，并重新赋值</span></span><br><span class="line"><span class="built_in">list</span> = <span class="built_in">list</span>.pop[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 删除元素3在列表的第一个匹配项</span></span><br><span class="line"><span class="built_in">list</span>.remove(元素<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 清空列表</span></span><br><span class="line"><span class="built_in">list</span>.clear()</span><br><span class="line"><span class="comment"># 统计元素3在列表中的数量</span></span><br><span class="line"><span class="built_in">list</span>.count(元素<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 统计列表中所有元素数量</span></span><br><span class="line"><span class="built_in">len</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><ul><li>查找某元素下标<br>目标列表.index(目标元素)，返回元素下标值或者报错ValueError</li><li>修改某元素的值<br>目标列表[对应下标值] = 修改值</li><li>指定位置插入元素<br>目标列表.insert(下标位置，修改元素)</li><li>追加元素至列表末尾<br>目标列表.append(追加元素)</li><li>末尾追加一批元素<br>目标列表.extend(一批元素)</li><li>删除指定位置元素<br>del 目标列表[指定位置]</li><li>取出指定下标的元素，在原列表中删除该元素<br>新元素 = 目标列表.pop[指定位置]</li><li>删除某元素在列表的第一个匹配项<br>目标列表.remove(指定元素)</li><li>清空列表<br>目标列表.clear( )</li><li>统计指定元素在列表中的数量<br>目标列表.count(指定元素)</li><li>统计列表中总的元素数量<br>len(目标列表)</li></ul></li><li>遍历：</li></ol><ul><li>while遍历语句：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index =<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(列表):</span><br><span class="line">元素 = 列表[index]</span><br><span class="line">元素处理index += <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li>for遍历语句：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 列表:</span><br><span class="line">对临时变量处理</span><br></pre></td></tr></table></figure></li></ul><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><ol><li>定义：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义空元组</span></span><br><span class="line">变量名称 = ()</span><br><span class="line">变量名称 = <span class="built_in">tuple</span>()</span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">变量名称 = (元素<span class="number">1</span>,元素<span class="number">2</span>,····,元素n) </span><br><span class="line"><span class="comment"># 注意定义单个元组，需加&#x27;,&#x27;，否则会变成字符串类型</span></span><br><span class="line">变量名称 = (元素<span class="number">1</span>,) </span><br><span class="line"><span class="comment"># 其中元素的种类可以是多种,没有限制，元组也可以嵌套元组</span></span><br></pre></td></tr></table></figure></li><li>特点：<ul><li>容纳多种不同种类元素</li><li>有序存储，拥有下标</li><li>不可修改</li><li>允许元素重复</li></ul></li><li>访问：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元组可以通过下标，访问元组内容</span></span><br><span class="line">name_tuple = (<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">ni =name_tuple[<span class="number">0</span>]</span><br><span class="line">num_tuple = (<span class="number">1</span>,(<span class="number">5</span>,<span class="number">0</span>),<span class="number">8</span>)</span><br><span class="line">s =num_tuple(<span class="number">1</span>)(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(ni,s)</span><br><span class="line"><span class="comment"># 输出：k 5(也可以反向取，(-3)和(-2)(-2)，但不可超出范围)</span></span><br><span class="line"><span class="comment"># 从前开始，0递增0、1、····，从后开始，-1递减-1、-2、···</span></span><br></pre></td></tr></table></figure></li><li>使用：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个元组</span></span><br><span class="line"><span class="built_in">tuple</span> = (元素<span class="number">1</span>,元素<span class="number">3</span>,元素<span class="number">2</span>，元素<span class="number">3</span>,元素<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 查询元素1对应的下标</span></span><br><span class="line"><span class="built_in">tuple</span>.index(元素<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 统计元素3在元组中的数量</span></span><br><span class="line"><span class="built_in">tuple</span>.count(元素<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 统计元组中所有元素数量</span></span><br><span class="line"><span class="built_in">len</span>(<span class="built_in">tuple</span>)</span><br></pre></td></tr></table></figure><ul><li>查找某元素下标<br>目标元组.index(目标元素)，返回元素下标值或者报错ValueError</li><li>统计指定元素在元组中的数量<br>目标元组.count(指定元素)</li><li>统计元组中总的元素数量<br>len(目标元组)</li></ul></li><li>遍历：</li></ol><ul><li>while遍历语句：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(元组):</span><br><span class="line">元素 = 元组[index]</span><br><span class="line">元素处理</span><br><span class="line">index += <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li>for遍历语句：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 元组:</span><br><span class="line">对临时变量处理</span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><ol><li>定义：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义空字符串</span></span><br><span class="line">变量名称 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">变量名称 = <span class="string">&quot;任意数量的字符&quot;</span></span><br></pre></td></tr></table></figure></li><li>特点：<ul><li>容纳任意数量字符串</li><li>有序存储，拥有下标</li><li>无法修改</li><li>允许字符重复</li></ul></li><li>访问：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元组可以通过下标，访问元组内容</span></span><br><span class="line"><span class="built_in">str</span> =<span class="string">&#x27;yaho&#x27;</span></span><br><span class="line">a = <span class="built_in">str</span>[<span class="number">2</span>]</span><br><span class="line">s = <span class="built_in">str</span>[-<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(a,s)</span><br><span class="line"><span class="comment"># 输出：h h(也可以反向取，但不可超出范围)</span></span><br><span class="line"><span class="comment"># 从前开始，0递增0、1、····，从后开始，-1递减-1、-2、···</span></span><br></pre></td></tr></table></figure></li><li>使用：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个字符串</span></span><br><span class="line"><span class="built_in">str</span> =<span class="string">&#x27; ya ho &#x27;</span></span><br><span class="line"><span class="comment"># 查询&#x27;ya&#x27;对应的下标(返回起始下标)</span></span><br><span class="line"><span class="built_in">str</span>.index(<span class="string">&#x27;ya&#x27;</span>)</span><br><span class="line"><span class="comment"># 替换&#x27;ya&#x27;为‘ni’,原串不可修改，但得到新串</span></span><br><span class="line">str_new = <span class="built_in">str</span>.replace(<span class="string">&#x27;ya&#x27;</span>,<span class="string">&#x27;ni&#x27;</span>)</span><br><span class="line"><span class="comment"># 将字符串按&#x27; &#x27;分割为多个字符串，并返回至列表对象</span></span><br><span class="line">list_split = <span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="comment"># 去除字符串前后所有空格,得到一个新字符串</span></span><br><span class="line">str_strip = <span class="built_in">str</span>.strip()</span><br><span class="line"><span class="comment"># 去除字符串前后&#x27;&#x27;p,得到一个新字符串</span></span><br><span class="line">str_strip = <span class="built_in">str</span>.strip(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"><span class="comment"># 统计字符&#x27;ya&#x27;在串中数量</span></span><br><span class="line"><span class="built_in">str</span>.count(<span class="string">&#x27;ya&#x27;</span>)</span><br><span class="line"><span class="comment"># 统计字符串的长度</span></span><br><span class="line"><span class="built_in">len</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><ul><li>查询某字符下标<br>目标串.index(‘目标字符串’)，返回起始字符下标值或者报错ValueError</li><li>替换待修改串为新字符串<br>新串 = 目标串.replace(‘待修改串’，’新字符串’)</li><li>将字符串按’某串’分割为多个字符串，并返回至列表对象<br>新列表 = 目标串.split(‘某串’)</li><li>去除字符串前后所有’指定元素’,得到一个新字符串<br>新串 = 目标串.strip(‘指定元素’)</li><li>统计指定字符在目标串中的数量<br>目标串.count(‘指定字符串’)</li><li>统计串中总的字符数量<br>len(‘目标串’)</li></ul></li><li>遍历：<ul><li>while遍历语句：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index =<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(<span class="built_in">str</span>):</span><br><span class="line">字符 = <span class="built_in">str</span>[index]</span><br><span class="line">字符处理</span><br><span class="line">index += <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li>for遍历语句：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 字符串:</span><br><span class="line">对临时变量处理</span><br></pre></td></tr></table></figure></li></ul></li><li>比大小：<ul><li>一对字符串通过其对应的ASCLL码值来从前到后依次比大小，相同则比下一位。</li><li>0-9  —&gt; 48-57</li><li>A-Z —&gt; 65- 90</li><li>a-z —&gt; 97-122</li></ul></li></ol><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><ol><li>定义：<ul><li>内容连续、有序、可使用下标搜引的一类数据容器(列表，元组，字符串)</li></ul></li><li>切片：<ul><li>语法：从一个序列中取一个子序列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">序列[起始下标:结束下标:步长]</span><br><span class="line"><span class="comment">#  ***切片不影响原序列***</span></span><br><span class="line"><span class="comment"># 注意是下标,起始留空则从头，结束留空则至结尾</span></span><br><span class="line"><span class="comment">#步长表示每次取的间隔，若为负数则反向取</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ol><li>定义：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义集合变量</span></span><br><span class="line">变量名称 = &#123;元素,元素,····,元素&#125;</span><br><span class="line"><span class="comment"># 定义空集合</span></span><br><span class="line">变量名称 =<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure></li><li>特点：<ul><li>容纳多个不重复数据，支持多种类型</li><li>无序存储，没有下标</li><li>允许修改</li><li>不允许字符重复</li></ul></li><li>使用：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> = &#123;<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;u&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 为集合尾部添加一个‘n’</span></span><br><span class="line"><span class="built_in">set</span>.add(<span class="string">&#x27;k&#x27;</span>)  <span class="comment">#不允许重复，重复不添加</span></span><br><span class="line"><span class="built_in">set</span>.add(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"><span class="comment"># 去除集合中元素‘n’</span></span><br><span class="line"><span class="built_in">set</span>,remove(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"><span class="comment"># 随机取出集合中一个元素</span></span><br><span class="line">element = <span class="built_in">set</span>.pop()</span><br><span class="line"><span class="comment"># 清空集合</span></span><br><span class="line"><span class="built_in">set</span>.clear()</span><br><span class="line"><span class="comment"># 取出两个集合的差集</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>&#125;</span><br><span class="line">set3 = set1.difference(set2)</span><br><span class="line"><span class="comment"># 消除set1中与set2的相同集</span></span><br><span class="line">set1.difference_update(set2)</span><br><span class="line"><span class="comment"># 合并两个集合(重复只会保留一个)</span></span><br><span class="line">set4 = set1.union(set2)</span><br><span class="line"><span class="comment"># 统计集合中元素个数</span></span><br><span class="line"><span class="built_in">len</span>(<span class="built_in">set</span>)</span><br><span class="line"><span class="comment"># 集合遍历</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">set</span>:</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure></li></ol><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ol><li>定义：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义空字典</span></span><br><span class="line"><span class="built_in">dict</span> =&#123;&#125;</span><br><span class="line"><span class="built_in">dict</span> = <span class="built_in">dict</span>()</span><br><span class="line"><span class="comment"># 定义字典变量</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;key : value, key : value,····，key : value&#125;</span><br><span class="line"><span class="comment"># 定义嵌套字典</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;</span><br><span class="line"><span class="string">&#x27;J&#x27;</span>:&#123;</span><br><span class="line"><span class="string">&#x27;语文&#x27;</span>:<span class="number">55</span></span><br><span class="line"><span class="string">&#x27;数学&#x27;</span>：<span class="number">55</span></span><br><span class="line"><span class="string">&#x27;英语&#x27;</span>: <span class="number">66</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>特点：<ul><li>不允许重复key，后面key重复则覆盖</li><li>key不能为字典类型，别的类型都可以，value可以任意类型</li><li>不可以使用下标，但可以通过key来访问对应value</li><li>可以修改</li></ul></li><li>使用：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;R&#x27;</span>:<span class="number">99</span>,<span class="string">&#x27;K&#x27;</span>:<span class="number">22</span>&#125;</span><br><span class="line"><span class="comment"># 通过key来访问对应value</span></span><br><span class="line">score = <span class="built_in">dict</span>[<span class="string">&#x27;R&#x27;</span>]</span><br><span class="line"><span class="comment"># 更新或增加元素</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;R&#x27;</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;J&#x27;</span>] = <span class="number">2</span></span><br><span class="line"><span class="comment"># 取出并删除元素</span></span><br><span class="line">score_J = <span class="built_in">dict</span>.pop[<span class="string">&#x27;J&#x27;</span>]</span><br><span class="line"><span class="comment"># 清空元素</span></span><br><span class="line"><span class="built_in">dict</span>.clear()</span><br><span class="line"><span class="comment"># 获取全部Key,返回dict_keys类型</span></span><br><span class="line">keys = <span class="built_in">dict</span>.keys()</span><br><span class="line"><span class="comment"># 遍历字典</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>[key])</span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>[key])</span><br></pre></td></tr></table></figure></li></ol><h3 id="通用操作"><a href="#通用操作" class="headerlink" title="通用操作"></a>通用操作</h3><ul><li>统计容器的元素数量：len()</li><li>统计容器的元素最大值：max()</li><li>统计容器的元素最小值：min()</li><li>将别的容器转换为字符串：str()</li><li>将别的容器转换为列表：list()</li><li>将别的容器转换为元组：tuple()</li><li>将别的容器转换为集合：set()</li><li>将容器顺序排序并放入列表中：sorted()</li><li>将容器逆序排序并放入列表中：sorted(,reverse = True )<blockquote><p>括号里面放目标容器</p></blockquote></li></ul><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ol><li>操作：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">文件对象 = <span class="built_in">open</span>(name,mode,encoding)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;D:/test.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding = <span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"><span class="comment"># r:只读，w:重写或创建，a:追加或创建</span></span><br><span class="line">***************************************************************************</span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line">文件.read(num)</span><br><span class="line">f.read(<span class="number">5</span>) <span class="comment"># 读取5个字节长度，</span></span><br><span class="line">f.read() <span class="comment"># 读取所有内容</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 按行读取文件所有内容，每行为一个元素，整体返回一个列表</span></span><br><span class="line">content = f.readlines()</span><br><span class="line"><span class="comment"># 文件读取不关闭，则会从上次读取的末尾继续读，而不是从头读</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 每次只读取一行内容</span></span><br><span class="line">content = f.readline()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># for循环读取每行数据</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line">***************************************************************************</span><br><span class="line"><span class="comment"># 关闭文件，内置flush(),关闭时会写入文件 </span></span><br><span class="line">f.close() </span><br><span class="line">***************************************************************************</span><br><span class="line"><span class="comment"># 打开并在操作完成后自动关闭文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/ik.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding = <span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">content = f.readlines()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件写入，写至缓存区</span></span><br><span class="line">f.write()</span><br><span class="line"><span class="comment"># &quot;\n&quot;可以换行</span></span><br><span class="line">f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="comment"># 内容刷新，从缓冲区写入内存</span></span><br><span class="line">f.flush()</span><br></pre></td></tr></table></figure></li></ol><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ol><li>语法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">可能发生异常的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">如果出现异常则执行此部分</span><br><span class="line"><span class="comment"># 捕获指定异常</span></span><br><span class="line"><span class="keyword">except</span> 指定异常 <span class="keyword">as</span> e:</span><br><span class="line"><span class="comment"># 捕获全部异常</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">如果没有异常则执行此部分代码</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">无论出不出现异常，都会执行此部分代码</span><br><span class="line"><span class="comment"># 异常具有传递性，如果存在函数调用，捕获最外层的函数会一直判断内部有无异常</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h2><ol><li>语法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> 包名.模块名</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">包名.模块名,方法名()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">from</span> 包名 <span class="keyword">import</span> 模块名</span><br><span class="line">模块名.方法名()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">from</span> 包名.模块名 <span class="keyword">import</span> 方法名</span><br><span class="line">方法名()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># __all__变量放在__init__模块的首部尽量</span></span><br><span class="line"><span class="comment"># 如果定义了__all__且不被放入的模块，只使用*则无法被别的模块调用，但可手动导入模块</span></span><br><span class="line">__all__ =[自己定义且想被调用的模块]</span><br><span class="line"><span class="comment"># ###只有含__init__.py的文件夹才算是python包</span></span><br><span class="line">***************************************************************************</span><br><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line">[<span class="keyword">from</span> 模块名] <span class="keyword">import</span> [模块|类|变量|函数|*] [<span class="keyword">as</span> 别名]</span><br><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 类、变量、方法</span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> 模块名 <span class="keyword">as</span> 别名</span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 功能名 <span class="keyword">as</span> 别名</span><br><span class="line"><span class="comment"># 不同模块的同名功能，则使用后导入的模块的</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 自制模块测试用语</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">测试函数(····)</span><br><span class="line">———————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="comment"># all变量放在自制模块的首部尽量</span></span><br><span class="line"><span class="comment"># 如果定义了__all__且不被放入的方法，只使用*则无法被别的模块调用，但可手动导入方法</span></span><br><span class="line">__all__ =[自己定义且想被调用的函数]</span><br></pre></td></tr></table></figure></li></ol><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ol><li>基础语法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建类和属性和方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">属性<span class="number">1</span> = <span class="literal">None</span></span><br><span class="line">属性<span class="number">2</span> = <span class="literal">None</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self,形参<span class="number">1</span>,····，形参N</span>):</span><br><span class="line">方法体</span><br><span class="line">在成员方法中必须通过<span class="variable language_">self</span>.属性访问成员变量</span><br><span class="line"><span class="comment"># self 表示类对象本身，出现在参数列表，但不占参数位置</span></span><br><span class="line"><span class="comment"># 创建类对象</span></span><br><span class="line">student =Student()</span><br><span class="line">对象名 = 类名()</span><br><span class="line"><span class="comment"># 为对象属性进行赋值</span></span><br><span class="line">student.name(<span class="string">&quot;J&quot;</span>)</span><br><span class="line">对象名.属性 = ···</span><br><span class="line"><span class="comment"># 调用对象方法</span></span><br><span class="line">student.func(x)</span><br><span class="line">对象名.方法名(实参<span class="number">1</span>,实参<span class="number">2</span>,·····)</span><br></pre></td></tr></table></figure></li><li>构造方法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">name = <span class="literal">None</span></span><br><span class="line">age = <span class="literal">None</span></span><br><span class="line">tel = <span class="literal">None</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,tel</span>):</span><br><span class="line"><span class="variable language_">self</span>.name = name</span><br><span class="line"><span class="variable language_">self</span>.age = age</span><br><span class="line"><span class="variable language_">self</span>.tel = tel</span><br><span class="line">student = Student(<span class="string">&quot;J&quot;</span>,<span class="number">66</span>,<span class="number">12121212121</span>)</span><br><span class="line"><span class="comment"># 构建类对象时，自动执行，若此时传参则直接回传给__init__方法使用</span></span><br></pre></td></tr></table></figure></li><li>内置方法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:  </span><br><span class="line">    name = <span class="literal">None</span>  </span><br><span class="line">    age = <span class="literal">None</span>  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):  </span><br><span class="line">        <span class="variable language_">self</span>.name = name  </span><br><span class="line">        <span class="variable language_">self</span>.age = age  </span><br><span class="line"><span class="comment"># __str__方法，实现类转字符串</span></span><br><span class="line"><span class="comment"># 不修改则用来控制类对象返回一个字符串，或自定义返回的字符串：</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Student类的对象，姓名是<span class="subst">&#123;self.name&#125;</span>的年龄是<span class="subst">&#123;self.age&#125;</span>&quot;</span></span><br><span class="line">-----------------由于类对象无法直接比较大小，所以采用以下方法-------------------</span><br><span class="line"><span class="comment"># __lt__方法,用来比较两个对象的大小,不包含等于  </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self,other</span>):  </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.age &lt; other.age  </span><br><span class="line"><span class="comment"># __le__方法,用来比较两个对象的大小，包含等于</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__le__</span>(<span class="params">self,other</span>):  </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.age &gt;= other.age  </span><br><span class="line"><span class="comment"># __eq__方法,用来比较两个对象是否等于，如果不采用则会比较地址是否相等  </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.age == other.age  </span><br><span class="line">stu1 = Student(<span class="string">&quot;周杰伦&quot;</span>,<span class="number">31</span>)  </span><br><span class="line">stu2 = Student(<span class="string">&quot;ikun&quot;</span>,<span class="number">36</span>)  </span><br><span class="line">stu3 = Student(<span class="string">&quot;小明&quot;</span>,<span class="number">31</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1&gt;=stu3)  </span><br><span class="line"><span class="built_in">print</span>(stu1&lt;=stu3)  </span><br><span class="line"><span class="built_in">print</span>(stu1&lt;stu2)  </span><br><span class="line"><span class="built_in">print</span>(stu1&gt;stu2)  </span><br><span class="line"><span class="built_in">print</span>(stu1==stu2)  </span><br><span class="line"><span class="built_in">print</span>(stu1==stu3)</span><br></pre></td></tr></table></figure></li><li>封装：<ul><li>私有变量：变量名以__开头(两个下划线)</li><li>私有变量无法赋值，无法获取值，但可被其他成员使用</li><li>私有方法：方法名以__开头(两个下划线)</li><li>私有方法无法直接被类对象调用，但是能被类中本身的方法调用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 封装为了提供仅在类内部使用的属性和方法，不对外开放</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stuednt</span>:</span><br><span class="line">__passward = <span class="literal">None</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__func</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">self,x</span>):</span><br><span class="line"><span class="variable language_">self</span>.__psssword = x</span><br><span class="line"><span class="variable language_">self</span>.__func()</span><br><span class="line">stu = Student()</span><br><span class="line">stu.fun(s)</span><br></pre></td></tr></table></figure></li></ul></li><li>继承：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子类继承父类所有属性和方法，并可以增加属性和方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">父类名</span>): <span class="comment"># 单继承</span></span><br><span class="line">类内容体</span><br><span class="line"><span class="comment"># 多个父类有相同名字方法时，从左到右先继承的保留</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(父类名<span class="number">1</span>,父类名<span class="number">2</span>,····,父类名N): <span class="comment"># 多继承</span></span><br><span class="line">类内容体</span><br><span class="line"><span class="comment"># 继承并复写父类方法和属性，</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">父类名</span>): </span><br><span class="line">父类属性 = ····</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">父类方法名</span>():</span><br><span class="line">新内容</span><br><span class="line"><span class="comment">#  复写父类属性和方法后，子类仍调用父类属性和方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>(<span class="title class_ inherited__">父类名</span>): </span><br><span class="line">父类属性 = ····</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">父类方法名</span>():</span><br><span class="line">新内容</span><br><span class="line"><span class="built_in">super</span>().父类属性</span><br><span class="line"><span class="built_in">super</span>().父类方法名()</span><br></pre></td></tr></table></figure></li><li>类型注解：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">****************注解都是提示性的，标错也不影响代码实际运行***************</span><br><span class="line"><span class="comment"># 注解完成后，可在调用时通过鼠标停留加上快捷键Ctrl+p进行查看</span></span><br><span class="line"><span class="comment"># 基础数据类型注解</span></span><br><span class="line">var1:<span class="built_in">int</span> = <span class="number">10</span></span><br><span class="line">str1:<span class="built_in">str</span> = <span class="string">&quot;kksk&quot;</span></span><br><span class="line"><span class="comment"># 类对象注解</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">stu:student = Student()</span><br><span class="line"><span class="comment"># 基础容器注解</span></span><br><span class="line">my_list:<span class="built_in">list</span> =[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">my_tupel:<span class="built_in">tuple</span> = (<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">my_set:<span class="built_in">set</span> [<span class="built_in">int</span>,<span class="built_in">str</span>] = &#123;<span class="number">5</span>,<span class="string">&#x27;k&#x27;</span>&#125;</span><br><span class="line">my_dict: <span class="built_in">dict</span>[<span class="built_in">str</span>,<span class="built_in">int</span>] = &#123;<span class="string">&#x27;kkk&#x27;</span>:<span class="number">555</span>&#125; </span><br><span class="line"><span class="comment"># 注释中进行类型注解</span></span><br><span class="line">var1 = <span class="number">10</span> <span class="comment"># type:<span class="built_in">int</span></span></span><br><span class="line">str1 = <span class="string">&quot;kksk&quot;</span>　<span class="comment">#　type:str</span></span><br><span class="line">---------------------<span class="type">Union</span>注解---------------------------</span><br><span class="line"><span class="comment">#进行union注解，类型为Union之一  </span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span>  </span><br><span class="line">a :<span class="type">Union</span>[<span class="built_in">int</span>,<span class="built_in">str</span>] = <span class="number">1</span>  </span><br><span class="line">list_a : <span class="built_in">list</span> [<span class="type">Union</span>[<span class="built_in">int</span>,<span class="built_in">str</span>]] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;siadjijiadji&quot;</span>]  </span><br><span class="line"><span class="comment"># union进行函数的注解  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a:<span class="type">Union</span>[<span class="built_in">int</span>,<span class="built_in">str</span>]</span>) -&gt; <span class="type">Union</span>[<span class="built_in">int</span>,<span class="built_in">str</span>]:  </span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">-----------------------函数类型注解------------------------</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">形参:类型，···，形参:类型</span>) -&gt; 返回值类型:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x:<span class="built_in">int</span>,y:<span class="built_in">int</span></span>): <span class="comment"># 函数形参注解</span></span><br><span class="line"><span class="keyword">return</span> x+y</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">data :<span class="built_in">list</span></span>)-&gt;<span class="built_in">list</span>: <span class="comment"># 函数返回值注解</span></span><br><span class="line"><span class="keyword">return</span> data</span><br></pre></td></tr></table></figure></li><li>多态：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 父类定义，子类执行，同一行为，不同状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speek</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="keyword">pass</span>  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;汪汪汪&quot;</span>)  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;喵喵喵&quot;</span>)  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">animal_speak</span>(<span class="params">animal:Animal</span>):  </span><br><span class="line">    animal.speak()  </span><br><span class="line">dog = Dog()  </span><br><span class="line">cat = Cat()  </span><br><span class="line">animal_speak(dog)  </span><br><span class="line">animal_speak(cat)</span><br><span class="line">************抽象方法：方法体为空(<span class="keyword">pass</span>)的方法*************************</span><br><span class="line"><span class="comment"># 抽象类(接口)：含有抽象方法的的类，子类必须实现父类的抽象方法</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning</title>
      <link href="/2025/04/07/%E7%AC%AC%E5%9B%9B%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2025/04/07/%E7%AC%AC%E5%9B%9B%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第四篇文章："><a href="#这是我的第四篇文章：" class="headerlink" title="这是我的第四篇文章："></a>这是我的第四篇文章：</h2>]]></content>
      
      
      <categories>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
